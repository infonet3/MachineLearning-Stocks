/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MatrixOps;

import java.io.BufferedReader;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author Matt Jones
 */
public class Matrix {

    public static double[] getAverages(double[][] inputMatrix) {
        int rows = inputMatrix.length;
        int cols = inputMatrix[0].length;
        double[] averages = new double[cols];
        
        //Initialize the array
        for (int i = 0; i < cols; i++) {
            averages[i] = 0.0;
        }

        //Sum the columns
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                averages[i] += inputMatrix[j][i];
            }
        }
        
        //Find the average
        for (int i = 0; i < averages.length; i++) {
            averages[i] /= rows; 
        }
        
        return averages;
    }

    public static double[] getRanges(double[][] inputMatrix) {
        int rows = inputMatrix.length;
        int cols = inputMatrix[0].length;
        double[] ranges = new double[cols];
        
        //Initialize the array
        for (int i = 0; i < cols; i++) {
            ranges[i] = 0.0;
        }

        //Sum the columns
        double max = 0.0;
        double min = 0.0;
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                
                //Initialize max and min to the first element
                if (j == 0) {
                    max = min = inputMatrix[j][i];
                } else {
                    if (inputMatrix[j][i] < min) {
                        min = inputMatrix[j][i];
                    }
                    
                    if (inputMatrix[j][i] > max) {
                        max = inputMatrix[j][i];
                    }
                }
            }
            
            ranges[i] = max - min;
        }

        return ranges;
    }

    public static double[][] meanNormalization(double[][] inputMatrix, double[] averages, double[] ranges) {

        int rows = inputMatrix.length;
        int cols = inputMatrix[0].length;
        double[][] normalizedMatrix = new double[rows][cols];

        //Normalize the matrix
        for (int i = 0; i < cols; i++) {
            for (int j = 0; j < rows; j++) {
                if (i == 0) {
                    normalizedMatrix[j][i] = inputMatrix[j][i];
                } else {
                    normalizedMatrix[j][i] = (inputMatrix[j][i] - averages[i]) / ranges[i];
                }
            }
        }
        
        return normalizedMatrix;
    }

    public static MatrixValues loadMatrixFromFile(final String INPUT_FILE, final String DELIM, final boolean HEADER_ROW, final int NUM_FEATURES, final int OUTPUT_COLUMN) {
        
        Path p = Paths.get(INPUT_FILE);
        
        //Now load the Lists with data
        List<double[]> rowList = new ArrayList<>();
        List<Double> outputList = new ArrayList<>();

        MatrixValues mv = null;
        
        try (BufferedReader reader = Files.newBufferedReader(p, Charset.defaultCharset())) {
            String row;
            for (int i = 0; ; i++) {
                row = reader.readLine();
                if (row == null)
                    break;

                //Don't process the header row
                if (HEADER_ROW && i == 0)
                    continue;

                double[] rowArray = new double[NUM_FEATURES + 1];
                rowArray[0] = 1.0; //x0
                int column = 1; //Start at 1 due to x0
                
                //Split the row from the file
                String[] cells = row.split(DELIM);
                for (int j = 0; j < cells.length; j++) {

                    if (j == OUTPUT_COLUMN) {
                        outputList.add(Double.parseDouble(cells[j]));
                        continue;
                    }

                    //If there are more columns than features truncate the rest
                    if (column <= NUM_FEATURES)
                        rowArray[column++] = Double.parseDouble(cells[j]);
                }

                //Add row array to list
                rowList.add(rowArray);
            }

            //Now generate the Matrix and resultValues
            if (rowList.size() != outputList.size())
                throw new Exception("Row Mismatch in loadMatrixFromFile Method!");

            //Create the arrays
            double[][] matrix = new double[rowList.size()][NUM_FEATURES + 1]; //Add addtnl col for x0
            double[] resultValues = new double[outputList.size()];
        
            //Copy Lists into arrays
            for (int i = 0; i < rowList.size(); i++) {
                matrix[i] = (double[])rowList.get(i);
                resultValues[i] = (double)outputList.get(i);
            }
        
            mv = new MatrixValues(matrix, resultValues);
            
        } catch(Exception exc) {
            System.out.println(exc);
        }
        
        return mv;
    }
    
}
